Checking the data type: print(type(variable_name))
Python List Methods:
.count() – a list method to count the number of occurrences of an element in a list.
votes = ["Jake", "Jake", "Laurie", "Laurie", "Laurie", "Jake", "Jake", "Jake", "Laurie", "Cassie", "Cassie", "Jake", "Jake", "Cassie", "Laurie", "Cassie", "Jake", "Jake", "Cassie", "Laurie"]

# Your code below: 
jake_votes = votes.count("Jake")
print(jake_votes)
9

.insert() – a list method to insert an element into a specific index of a list.
	Ex. Front_display_list [“Mango, “Filet Mignon”, “Choco Milk”]
Front_display_list.inser(2, “Pineapple”) puts Pineapple AT index 2 resulting in: 
Front_display_list [“Mango, “Filet Mignon”, “Pineapple”, “Choco Milk”]
.pop() – a list method to remove  an element from a specific index or from the end of a list
The method can be called without a specific index. Using .pop() without an index will remove whatever the last element of the list is.
	Ex. data_science_topics = ["Machine Learning", "SQL", "Pandas", "Algorithms", "Statistics", "Python 3"]
removed_element = data_science_topics.pop()
removed_element = data_science_topics.pop(3)
print(data_science_topics)
print (removed_element)

Output:
['Machine Learning', 'SQL', 'Pandas', 'Statistics']
Algorithms


range() – a built-in Python function to create a sequence of integers.
The function range() takes a single input, and generates numbers starting at 0 and ending at the number before the input.
So, if we want the numbers from 0 through 9, we use range(10) because 10 is 1 greater than 9:
number_list = range(9)
zero_to_seven = range(8)
print(list(number_list))
print(list(zero_to_seven))

Output:
[0, 1, 2, 3, 4, 5, 6, 7, 8]
[0, 1, 2, 3, 4, 5, 6, 7]
Ranges that skip numbers:
range_five_three = range(5, 15, 3)
range_diff_five = range(0, 40, 5)
print(list(range_five_three))
print(list(range_diff_five))

[5, 8, 11, 14]
[0, 5, 10, 15, 20, 25, 30, 35]

len() – a built-in Python function to get the length of a list.
When we apply len() to a list, we get the number of elements in that list:
long_list = [1, 5, 6, 7, -23, 69.5, True, "very", "long", "list", "that", "keeps", "going.", "Let's", "practice", "getting", "the", "length"]

big_range = range(2, 3000, 100)

# Your code below: 
long_list_len = len(long_list)
print(long_list_len)
big_range_length = len(big_range)
print(big_range_length)

18
30

.sort()/sorted() – a method and a built-in function to sort a list.
ddresses = ["221 B Baker St.", "42 Wallaby Way", "12 Grimmauld Place", "742 Evergreen Terrace", "1600 Pennsylvania Ave", "10 Downing St."]
print(addresses)
addresses.sort()
print(addresses)

# Checkpoint 3
names = ["Ron", "Hermione", "Harry", "Albus", "Sirius"]
names.sort()
print(names)

# Checkpoint 4 & 5
cities = ["London", "Paris", "Rome", "Los Angeles", "New York"]
sorted_cities = cities.sort(reverse=True)
print(cities)
['221 B Baker St.', '42 Wallaby Way', '12 Grimmauld Place', '742 Evergreen Terrace', '1600 Pennsylvania Ave', '10 Downing St.']
['10 Downing St.', '12 Grimmauld Place', '1600 Pennsylvania Ave', '221 B Baker St.', '42 Wallaby Way', '742 Evergreen Terrace']
['Albus', 'Harry', 'Hermione', 'Ron', 'Sirius']
['Rome', 'Paris', 'New York', 'Los Angeles', 'London']
Sorted(): 
games = ["Portal", "Minecraft", "Pacman", "Tetris", "The Sims", "Pokemon"]

# Your code below:
games_sorted = sorted(games)
print(games)
print(games_sorted)
['Portal', 'Minecraft', 'Pacman', 'Tetris', 'The Sims', 'Pokemon']
['Minecraft', 'Pacman', 'Pokemon', 'Portal', 'Tetris', 'The Sims']

Slicing: In Python, often we want to extract only a portion of a list. Dividing a list in such a manner is referred to as slicing.
suitcase = ["shirt", "shirt", "pants", "pants", "pajamas", "books"]

beginning = suitcase[0:2]

# Your code below: 
#print(beginning)
middle = suitcase[2:4]
print(middle)
['pants', 'pants']
New Example:
suitcase = ["shirt", "shirt", "pants", "pants", "pajamas", "books"]

# Your code below: 
last_two_elements = suitcase[-2:]
print(last_two_elements)
slice_off_last_three = suitcase[:-3]
print(slice_off_last_three)
['pajamas', 'books']
['shirt', 'shirt', 'pants']

Combination example using list methods: 
inventory = ["twin bed", "twin bed", "headboard", "queen bed", "king bed", "dresser", "dresser", "table", "table", "nightstand", "nightstand", "king bed", "king bed", "twin bed", "twin bed", "sheets", "sheets", "pillow", "pillow"]
inventory_len = len(inventory)
first = inventory[0]
last = inventory[-1]
inventory_2_6 = inventory[2:6]
first_3 = inventory[0:3]
twin_beds = inventory.count("twin bed")
removed_item = inventory.pop(4)
inventory.insert(10, "19th Century Bed Frame")
inventory.sort(reverse=True)
print(inventory)

['twin bed', 'twin bed', 'twin bed', 'twin bed', 'table', 'table', 'sheets', 'sheets', 'queen bed', 'pillow', 'pillow', 'nightstand', 'nightstand', 'king bed', 'king bed', 'headboard', 'dresser', 'dresser', '19th Century Bed Frame']








2nd Combo Example:
toppings = ["pepperoni", "pineapple", "cheese", "olives", "sausage", "anchovies", "mushrooms"]
prices = [2, 6, 1, 3, 2, 7, 2]
num_two_dollar_slices = prices.count(2)
print(num_two_dollar_slices)
num_pizzas = len(toppings)
print("We sell " + str(num_pizzas), "different kinds of pizza!")
pizza_and_prices = [
  [2, "pepperoni"],
  [6, "pineapple"],
  [1, "cheese"],
  [3, "sausage"],
  [2, "olives"],
  [7, "anchovies"],
  [2, "mushrooms"]
]
print(pizza_and_prices)
pizza_and_prices.sort()
print(pizza_and_prices)
cheapest_pizza = pizza_and_prices[0]
print(cheapest_pizza)
priciest_pizza = pizza_and_prices[-1]
print(priciest_pizza)
pizza_and_prices.pop()
print(pizza_and_prices)
pizza_and_prices.insert(4, [2.5, "peppers"])
print(pizza_and_prices)
three_cheapest = pizza_and_prices[:3]
print(three_cheapest)
3

We sell 7 different kinds of pizza!
[[2, 'pepperoni'], [6, 'pineapple'], [1, 'cheese'], [3, 'sausage'], [2, 'olives'], [7, 'anchovies'], [2, 'mushrooms']]
[[1, 'cheese'], [2, 'mushrooms'], [2, 'olives'], [2, 'pepperoni'], [3, 'sausage'], [6, 'pineapple'], [7, 'anchovies']]

[1, 'cheese']

[7, 'anchovies']

[[1, 'cheese'], [2, 'mushrooms'], [2, 'olives'], [2, 'pepperoni'], [3, 'sausage'], [6, 'pineapple']]

[[1, 'cheese'], [2, 'mushrooms'], [2, 'olives'], [2, 'pepperoni'], [2.5, 'peppers'], [3, 'sausage'], [6, 'pineapple']]

[[1, 'cheese'], [2, 'mushrooms'], [2, 'olives']]
