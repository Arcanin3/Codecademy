List Comprehensions: Introduction
So far we have seen many of the ideas about using loops in our code. Python prides itself on allowing programmers to write clean and elegant code. We have already seen this with Python giving us the ability to write while and for loops in a single line.
In this exercise, we are going to examine another way we can write elegant loops in our programs using list comprehensions.
To start, let’s say we had a list of integers and wanted to create a list where each element is doubled. We could accomplish this using a for loop and a new list called doubled:
numbers = [2, -1, 79, 33, -45]
doubled = []
 
for number in numbers:
  doubled.append(number * 2)
 
print(doubled)
Would output:
[4, -2, 158, 66, -90]

Let’s see how we can use the power of list comprehensions to solve these types of problems in one line. Here is our same problem but now written as a list comprehension:
numbers = [2, -1, 79, 33, -45]
doubled = [num * 2 for num in numbers]
print(doubled)
Let’s break down our example in a more general way:
new_list = [<expression> for <element> in <collection>]
In our doubled example, our list comprehension:
1.	Takes an element in the list numbers
2.	Assigns that element to a variable called num (our <element>)
3.	Applies the <expression> on the element stored in num and adds the result to a new list called doubled
4.	Repeats steps 1-3 for every other element in the numbers list (our <collection>)
Our result would be the same:
[4, -2, 158, 66, -90]

grades = [90, 88, 62, 76, 74, 89, 48, 57]
scaled_grades = [num + 10 for num in grades]
print(scaled_grades)

[100, 98, 72, 86, 84, 99, 58, 67]

List Comprehensions: Conditionals
List Comprehensions are very flexible. We even can expand our examples to incorporate conditional logic.
Suppose we wanted to double only our negative numbers from our previous numbers list.
We will start by using a for loop and a list only_negative_doubled:
numbers = [2, -1, 79, 33, -45]
only_negative_doubled = []
 
for num in numbers:
  if num < 0: 
    only_negative_doubled.append(num * 2)
 
print(only_negative_doubled) 
Would output:
[-2, -90]
Now, here is what our code would look like using a list comprehension:
numbers = [2, -1, 79, 33, -45]
negative_doubled = [num * 2 for num in numbers if num < 0]
print(negative_doubled)
Would output the same result:
[-2, -90]

NOTE: This is a bit different than our previous comprehension since the conditional if num < 0 else num * 3 comes after the expression num * 2 but before our for keyword. The placement of the conditional expression within the comprehension is dependent on whether or not an else clause is used. When an if statement is used without else, the conditional must go after for <element> in <collection>. If the conditional expression includes an else clause, the conditional must go before for. Attempting to write the expressions in any other order will result in a SyntaxError.
Here are a few list comprehensions in a single block. Take a moment to compare how the syntax must change depending on whether or not an else clause is included:
numbers = [2, -1, 79, 33, -45]
 
no_if   = [num * 2 for num in numbers]
if_only = [num * 2 for num in numbers if num < 0]
if_else = [num * 2 if num < 0 else num * 3 for num in numbers]



Using a list comprehension, create a new list called can_ride_coaster that has every element from heights that is greater than 161.
heights = [161, 164, 156, 144, 158, 170, 163, 163, 157]
can_ride_coaster = [num for num in heights if num > 161]
print(can_ride_coaster)

[164, 170, 163, 163]

Final Lesson part:
single_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
squares = []
for num in single_digits:
  #print(num)
  squares.append(num**2)
print(squares)
cubes = [num**3 for num in single_digits]
print(cubes)


Output:
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]












Loopy Lists Project: Carly’s Clippers
hairstyles = ["bouffant", "pixie", "dreadlocks", "crew", "bowl", "bob", "mohawk", "flattop"]

prices = [30, 25, 40, 20, 20, 35, 50, 35]

last_week = [2, 3, 5, 8, 4, 4, 6, 2]

total_price = 0
for price in prices:
  total_price += price

average_price = total_price / len(prices)
print("Average Haircut Price:", average_price)

new_prices = [price - 5 for price in prices]
print(new_prices)

total_revenue = 0
for i in range(len(hairstyles)):
  total_revenue += prices[i] * last_week[i]

print(total_revenue)

average_daily_revenue = total_revenue / 7
print(average_daily_revenue)

cuts_under_30 = [hairstyles[i] for i in range(len(hairstyles)) if prices[i] < 30]
print(cuts_under_30)

Average Haircut Price: 31.875
[25, 20, 35, 15, 15, 30, 45, 30]
1085
155.0
['pixie', 'crew', 'bowl']
