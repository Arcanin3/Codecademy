Node Class and Constructor

Now that we’ve learned about doubly linked lists, let’s implement one in Python.

As a reminder, a doubly linked list is a sequential chain of nodes, just like a singly linked list. The nodes we used for our singly linked lists contained two elements:

A value
A link to the next node
The difference between a doubly linked list and a singly linked list is that in a doubly linked list, the nodes have pointers to the previous node as well as the next node. This means that the doubly linked list data structure has a tail property in addition to a head property, which allows for traversal in both directions.

So the nodes we will use for our doubly linked list contain three elements:

A value
A pointer to the previous node
A pointer to the next node
Depending on the end-use of the doubly linked list, there are a variety of methods that we can define.

For our use, we want to be able to:

Add a new node to the head (beginning) of the list
Add a new node to the tail (end) of the list
Remove a node from the head of the list
Remove a node from the tail of the list
Find and remove a specific node by its value
Print out the nodes in the list in order from head to tail
To start, we are going to look at the updated Node class and create the constructor.

1.
We are going to use a provided Node class, which you can find at the top of script.py. We’ve added a prev_node property to the class, as well as .set_prev_node() and .get_prev_node() methods.

class Node:
  def __init__(self, value, next_node=None, prev_node=None):
    self.value = value
    self.next_node = next_node
    self.prev_node = prev_node

2.
In our DoublyLinkedList class at the bottom of script.py, create an __init__() method (constructor) that only has self as a parameter, since each list will be empty when it’s created.

Inside your __init__() method create head_node and tail_node instance variables. The nodes have no value yet, so set them to None.

lass DoublyLinkedList:
  def __init__(self):
    self.head_node = None
    self.tail_node = None

------------------------------------
Adding to the Head

In a singly linked list, we can add to the head of the list by checking to see if it already has a head. We then either set the new node as the head (if there was no head) or update the head property, and link the past head to the new head.

Since a doubly linked list has an additional tail property and is built with nodes that each have two pointers, there are a few more steps:

Start by checking to see if there is a current head to the list
If there is (meaning the list is not empty), then we want to reset the pointers at the head of the list:
Set the current head’s previous node to the new head
Set the new head’s next node to the current head
Update the head property to be the new head
Finally, if there isn’t a current tail to the list (meaning the list was empty):
Update the tail property to be the new head since that node will be both the head and tail of the list

1.
Define an .add_to_head() method that takes self and new_value as parameters.

Inside, create:

A new_head Node that takes new_value as a parameter
A current_head Node that’s set to the list’s head

  def add_to_head(self, new_value):
    new_head = Node(new_value)
    current_head = self.head_node

2.
If there is a current head to the list:

Set current_head‘s previous node to new_head
Set new_head‘s next node to current_head
Remember to use the Node class’s .set_prev_node() and .set_next_node() methods.

   if current_head != None:
      current_head.set_prev_node(new_head)
      new_head.set_next_node(current_head)

3.
Outside of the if statement, set the list’s head to new_head.

    self.head_node = new_head

4.
Lastly, if the list doesn’t have a tail, set the list’s tail to the new head.

    if self.tail_node == None:
      self.tail_node = new_head

-------------------------------------------------------------------

Adding to the Tail

Since doubly linked lists have a tail property, we don’t have to iterate through the entire list to add to the tail like we did with a singly linked list. 
The new method will mirror what we did in our .add_to_head() method:

Start by checking to see if there is a current tail to the list
If there is (meaning the list is not empty), then we want to reset the pointers at the tail of the list:
Set the current tail’s next node to the new tail
Set the new tail’s previous node to the current tail
Update the tail property to be the new tail
Finally, if there isn’t a current head to the list (meaning the list was empty):
Update the head property to be the new tail since that node will be both the head and tail

1.
Define an .add_to_tail() method that takes self and new_value as parameters.

Inside, create:

A new_tail Node that takes new_value as a parameter
A current_tail Node that’s set to the list’s tail

def add_to_tail(self, new_value):
  new_tail = Node(new_value)
  current_tail = self.tail_node

2.
If there is a current tail to the list:

Set the current tail’s next node to new_tail
Set new_tail‘s previous node to the current tail

  if current_tail != None:
    current_tail.set_next_node(new_tail)
    new_tail.set_prev_node(current_tail)

3.
Outside your if statement, set the list’s tail to the new_tail.

  self.tail_node = new_tail

4.
Lastly, if the list doesn’t have a head, set the list’s head to the new tail.

  if self.head_node == None:
    self.head_node = new_tail

Full Code:

class Node:
  def __init__(self, value, next_node=None, prev_node=None):
    self.value = value
    self.next_node = next_node
    self.prev_node = prev_node
    
  def set_next_node(self, next_node):
    self.next_node = next_node
    
  def get_next_node(self):
    return self.next_node

  def set_prev_node(self, prev_node):
    self.prev_node = prev_node
    
  def get_prev_node(self):
    return self.prev_node
  
  def get_value(self):
    return self.value
    

class DoublyLinkedList:
  def __init__(self):
    self.head_node = None
    self.tail_node = None
  
  def add_to_head(self, new_value):
    new_head = Node(new_value)
    current_head = self.head_node

    if current_head != None:
      current_head.set_prev_node(new_head)
      new_head.set_next_node(current_head)

    self.head_node = new_head

    if self.tail_node == None:
      self.tail_node = new_head

  def add_to_tail(self, new_value):
    new_tail = Node(new_value)
    current_tail = self.tail_node

    if current_tail != None:
      current_tail.set_next_node(new_tail)
      new_tail.set_prev_node(current_tail)

    self.tail_node = new_tail

    if self.head_node == None:
      self.head_node = new_tail

-----------------------------------------------------
Removing the Head

Due to the added tail property, removing the head of the list in a doubly linked list is a little more complicated than doing so in a singly linked list:

Start by checking if there’s a current head to the list.
If there isn’t, the list is empty, so there’s nothing to remove and the method ends
Otherwise, update the list’s head to be the current head’s next node
If the updated head is not None (meaning the list had more than one element when we started):
Set the head’s previous node to None since there should be no node before the head of the list
If the removed head was also the tail of the list (meaning there was only one element in the list):
Call .remove_tail() to make the necessary changes to the tail of the list (we will create this method in the next exercise!)
Finally, return the removed head’s value

1.
Define a .remove_head() method that only takes self as a parameter. Inside, create a removed_head variable and set it to the list’s head node.

  def remove_head(self):
    removed_head = self.head_node

2.
Check if removed_head has no value. If so, that means there’s nothing to remove, so return None to end the method.

    if removed_head == None:
      return None

3.
Outside of your if, set the list’s head to removed_head‘s next node.

If the list still has a head, set its previous node to None, since the head of the list shouldn’t have a previous node.

    self.head_node = removed_head.get_next_node()

    if self.head_node != None:
      self.head_node.set_prev_node(None)


4.
Check if removed_head is equal to the list’s tail. If so, call the .remove_tail() method (we will create this in the next exercise).

    if removed_head == self.tail_node:
      self.remove_tail()

5.
Finally, return removed_head‘s value.

    return removed_head.get_value()

---------------------------------------------------------------

Removing the tail

The doubly linked list’s tail property allows us to remove the tail just as easily as we could remove the head. In fact, like with the .add_to_head() and .add_to_tail() methods, the .remove_tail() method will closely mirror the .remove_head() method:

Start by checking if there’s a current tail to the list.
If there isn’t, The list is empty, so there’s nothing to remove, and the method ends
Otherwise, update the list’s tail to be the current tail’s previous node
If the updated tail is not None (meaning the list had more than one element when we started):
Set the tail’s next node to None since there should be no node after the tail of the list
If the removed tail was also the head of the list (meaning there was only one element in the list):
Call .remove_head() to make the necessary changes to the head of the list
Finally, return the old tail’s data

1.

Define a .remove_tail() method that only has self as a parameter. Inside, create a removed_tail variable and set it to the list’s tail.

  def remove_tail(self):
    removed_tail = self.tail_node

2.
Check if removed_tail has no value. If so, that means the list is empty and there’s nothing to remove, so return None to end the method.

    if removed_tail == None:
      return None

3.
Outside of your if, set the list’s tail to removed_tail‘s previous node.

If the list still has a tail (meaning that the list isn’t now empty), set the tail’s next node to None, since the tail of the list shouldn’t have a next node.

    if self.tail_node != None:
      self.tail_node.set_next_node(None)

4.
Check if removed_tail is equal to the list’s head. If so, call the .remove_head() method.

    if removed_tail == self.head_node:
      self.remove_head()

5.
Finally, return removed_tail‘s value.

    return removed_tail.get_value()


Full Code:

  def remove_tail(self):
    removed_tail = self.tail_node

    if removed_tail == None:
      return None

    self.tail_node = removed_tail.get_prev_node()

    if self.tail_node != None:
      self.tail_node.set_next_node(None)

    if removed_tail == self.head_node:
      self.remove_head()

    return removed_tail.get_value()

-----------------------------------------------------

Removing by Value I

In addition to removing the head and the tail of the list, it would also be useful to be able to remove a specific element from anywhere in the list.

Imagine that you have a list of errands to run. You don’t always do your errands in order, so when you finish doing your laundry and want to cross it off, that could be somewhere in the middle of the list. We are going to build a .remove_by_value() method that will allow you to cross off (remove) that errand no matter where it is in the list.

In order to do this:

Iterate through the list to find the matching node
If there is no matching element in the list:
Return None
If there is a matching node, we will then check to see if it is the head or tail of the list:
If so, call the corresponding .remove_head() or .remove_tail() method
If not, that means the node was somewhere in the middle of the list. In that case:
Remove it by resetting the pointers of its previous and next nodes
Finally, return the node’s value property

1.
Define a .remove_by_value() method that takes self and value_to_remove as parameters.

Inside it, create a variable called node_to_remove. We don’t know what it is yet, so set it to None.

  def remove_by_value(self, value_to_remove):
    node_to_remove = None

2.
Create a current_node variable and set it equal to the list’s head. Then create a while loop that runs while current_node isn’t None.

Inside the loop, update current_node to be its next node. This is how we will iterate through the list as we look for the matching node.

    while current_node != None:
      if current_node.get_value() == value_to_remove:
        node_to_remove = current_node
        break

      current_node = current_node.get_next_node()

3.
Inside the while loop, but before you updated current_node to be its next node, create an if statement that checks if current_node‘s value matches the passed in value_to_remove. If it does, that means we have found the matching node.

Inside the if:

Set node_to_remove to current_node
break to leave the while loop, since we don’t need to keep looking through the list

    while current_node != None:
      if current_node.get_value() == value_to_remove:
        node_to_remove = current_node
        break

      current_node = current_node.get_next_node()

4.
Outside your while loop, check if node_to_remove has any value. If it doesn’t, that means there was no matching node in the list, so return None to end the method.

    if node_to_remove == None:
      return None

---------------------------------------------------------

Removing by Value II

Now that we’ve found the node that we want to remove from the list (or returned None if it didn’t exist), it’s time to actually remove the node. This means resetting the pointers around the node.

There are three cases here:

The node was the head of the list, in which case we can just call .remove_head()
The node was the tail of the list, in which case we can just call .remove_tail()
The node was somewhere in the middle of the list, in which case we will need to manually change the pointers for its previous and next nodes

1.
Still in your .remove_by_value() method, check if node_to_remove is the list’s head. If so, call .remove_head().

    if node_to_remove == self.head_node:
      self.remove_head()

2.
Else if node_to_remove is the list’s tail, call .remove_tail().

    if node_to_remove == self.head_node:
      self.remove_head()
    elif node_to_remove == self.tail_node:
      self.remove_tail()

3.
Else, we know that the node is somewhere in the middle of the list. To remove it, we will need to reset the pointers for the nodes around it. In an else block, create:

A next_node node that is equal to node_to_remove‘s next node
A prev_node node that is equal to node_to_remove‘s previous node

    else:
      next_node = node_to_remove.get_next_node()
      prev_node = node_to_remove.get_prev_node()

4.
Now that we have our nodes, we can remove the pointers to and from node_to_remove and have next_node and prev_node point to each other. Still in the else block:

Set next_node‘s previous node to prev_node
Set prev_node‘s next node to next_node

    else:
      next_node = node_to_remove.get_next_node()
      prev_node = node_to_remove.get_prev_node()
      next_node.set_prev_node(prev_node)
      prev_node.set_next_node(next_node)

5.
Finally, outside of the else block, return node_to_remove.

    return node_to_remove

---------------------------------------------------------------------------

Using the List

You finished your DoublyLinkedList class! Now we’re going to use that class to model a subway line. A doubly linked list is a great data structure to use to model a subway, as both have a first and last element, and are comprised of nodes (or stops) with links to the elements before and after them.

We will add to and remove stops from our subway line, and print it out to see what we’ve done. The .stringify_list() method is the same as the one from the LinkedList class and has been provided for you.

1.
We’re going to model a (fictional) subway line that will travel from Central Park to the Brooklyn Bridge.

At the bottom of script.py, outside the DoublyLinkedList class, create a new DoublyLinkedList named subway.

2.
The subway starts at Central Park and winds its way downtown. In the following order:

Add "Times Square" to the head of the list
Add "Grand Central" to the head of the list
Add "Central Park" to the head of the list
Then print the list.

subway.add_to_head("Times Square")
subway.add_to_head("Grand Central")
subway.add_to_head("Central Park")

print(subway.stringify_list())

3.
The subway continues from Times Square down to the Brooklyn Bridge. In the following order:

Add "Penn Station" to the tail of the list
Add "Wall Street" to the tail of the list
Add "Brooklyn Bridge" to the tail of the list
Then print the list again.

subway.add_to_tail("Penn Station")
subway.add_to_tail("Wall Street")
subway.add_to_tail("Brooklyn Bridge")

print(subway.stringify_list())

4.
Oh no! There’s construction happening on the subway line: the Central Park and Brooklyn Bridge stops will temporarily be closed.

Remove them from your list without iterating through the entire list.

Then print the list again.

subway.remove_head()
subway.remove_tail()
#print(subway.stringify_list())

5.
It turns out that the Times Square station is under construction as well. Remove it from the list, and then print the list for the last time.

subway.remove_by_value("Times Square")
print(subway.stringify_list())

---------------------------------------------

Review

Congratulations, you have created a doubly linked list class in Python!

We did this by:

Using our Node class to hold the value and links between nodes
Implementing a DoublyLinkedList class to handle external operations on the list, like adding and removing nodes
Creating an instance of our list, and using the .stringify_list() method to track the changes we made

Full Code:

class Node:
  def __init__(self, value, next_node=None, prev_node=None):
    self.value = value
    self.next_node = next_node
    self.prev_node = prev_node
    
  def set_next_node(self, next_node):
    self.next_node = next_node
    
  def get_next_node(self):
    return self.next_node

  def set_prev_node(self, prev_node):
    self.prev_node = prev_node
    
  def get_prev_node(self):
    return self.prev_node
  
  def get_value(self):
    return self.value


class DoublyLinkedList:
  def __init__(self):
    self.head_node = None
    self.tail_node = None
  
  def add_to_head(self, new_value):
    new_head = Node(new_value)
    current_head = self.head_node

    if current_head != None:
      current_head.set_prev_node(new_head)
      new_head.set_next_node(current_head)

    self.head_node = new_head

    if self.tail_node == None:
      self.tail_node = new_head

  def add_to_tail(self, new_value):
    new_tail = Node(new_value)
    current_tail = self.tail_node

    if current_tail != None:
      current_tail.set_next_node(new_tail)
      new_tail.set_prev_node(current_tail)

    self.tail_node = new_tail

    if self.head_node == None:
      self.head_node = new_tail

  def remove_head(self):
    removed_head = self.head_node

    if removed_head == None:
      return None

    self.head_node = removed_head.get_next_node()

    if self.head_node != None:
      self.head_node.set_prev_node(None)

    if removed_head == self.tail_node:
      self.remove_tail()

    return removed_head.get_value()

  def remove_tail(self):
    removed_tail = self.tail_node

    if removed_tail == None:
      return None

    self.tail_node = removed_tail.get_prev_node()

    if self.tail_node != None:
      self.tail_node.set_next_node(None)

    if removed_tail == self.head_node:
      self.remove_head()

    return removed_tail.get_value()

  def remove_by_value(self, value_to_remove):
    node_to_remove = None
    current_node = self.head_node

    while current_node != None:
      if current_node.get_value() == value_to_remove:
        node_to_remove = current_node
        break

      current_node = current_node.get_next_node()

    if node_to_remove == None:
      return None

    if node_to_remove == self.head_node:
      self.remove_head()
    elif node_to_remove == self.tail_node:
      self.remove_tail()
    else:
      next_node = node_to_remove.get_next_node()
      prev_node = node_to_remove.get_prev_node()
      next_node.set_prev_node(prev_node)
      prev_node.set_next_node(next_node)

    return node_to_remove

  def stringify_list(self):
    string_list = ""
    current_node = self.head_node
    while current_node:
      if current_node.get_value() != None:
        string_list += str(current_node.get_value()) + "\n"
      current_node = current_node.get_next_node()
    return string_list

