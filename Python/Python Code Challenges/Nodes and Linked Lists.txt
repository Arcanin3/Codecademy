Introduction: Linked Lists

Create and use your own Node classes in Python.
Create and use your own LinkedList class in Python using your prior Node class.
Use common LinkedList algorithms.
Create and use your own DoublyLinkedList class in Python using an edited version of your prior Node class.

Nodes

Nodes are the fundamental building blocks of many computer science data structures. They form the basis for linked lists, stacks, queues, trees, and more. In this article, we’ll discuss what a node is as well as how nodes link to other nodes.

An individual node contains data and links to other nodes. Each data structure adds additional constraints or behavior to these features to create the desired structure.


Node implementations
The data contained within a node can be a variety of types, depending on the language you are using. In the previous example, it was an integer (the number 5), but it could be a string ("five"), decimal (5.1), an array ([5,3,4]) or nothing (null).

The link or links within the node are sometimes referred to as pointers. This is because they “point” to another node.

Typically, data structures implement nodes with one or more links. If these links are null, it denotes that you have reached the end of the particular node or link path you were previously following.


Node linking
Often, due to the data structure, nodes may only be linked to a single other node. This makes it very important to consider how you implement modifying or removing nodes from a data structure.

If you inadvertently remove the single link to a node, that node’s data and any linked nodes could be “lost” to your application. When this happens to a node, it is called an orphaned node.

Recap

Nodes contain data, which can be a variety of data types.
They also contain links to other nodes. If a node has no links, or they are all null, you have reached the end of the path you were following.
Nodes can be orphaned if there are no existing links to them.


Nodes Python Introduction

We will use a basic node that contains data and one link to another node. The node’s data will be specified when creating the node and immutable (can’t be updated). The link will be optional at initialization and can be updated.

1. 
Begin by creating a new class, Node. Add an .__init__() method in the Node class that takes a value and an optional link_node (default should be None). These should be saved to the corresponding self properties (self.value and self.link_node).

class Node:
  def __init__( self, value, link_node=None):
    self.value = value
    self.link_node = link_node

Nodes Python Getters

We need methods to access the data and link within the node. For this, we will use two getters, .get_value() and .get_link_node().

These should each return their corresponding value on the self object.

1.
Implement the .get_value() getter in the Node class.

2.
Implement the .get_link_node() getter in the Node class.

class Node:
  def __init__(self, value, link_node=None):
    self.value = value
    self.link_node = link_node
    
  # Define your get_value and get_link_node methods below:

 def get_value(self):
    return self.value

  def get_link_node(self):
    return self.link_node


Nodes Python Setter

We are only allowing the value of the node to be set upon creation. However, we want to allow updating the link of the node. For this, we will use a setter to modify the self.link_node attribute.

The 
Preview: Docs Loading link description
method
 should be called .set_link_node() and should take link_node as an 
Preview: Docs Loading link description
argument. It should then update the self.link_node attribute as appropriate.

1.
Implement the .set_link_node() setter in the Node class.

class Node:
  def __init__(self, value, link_node=None):
    self.value = value
    self.link_node = link_node
    
  def get_value(self):
    return self.value
  
  def get_link_node(self):
    return self.link_node
  
  # Define your set_link_node method below:

  def set_link_node(self, link_node):
    self.link_node = link_node


Python Nodes Review

1.
Outside of Node, instantiate three nodes. None have an argument for link_node:

the first has a value of "likes to yak" and be assigned to a variable yacko
the second has a value of "has a penchant for hoarding snacks" and be assigned to wacko
the third has a value of "enjoys spending time in movie lots" and be assigned to dot

yacko = Node("likes to yak")
wacko = Node("has a penchant for hoarding snacks")
dot = Node("enjoys spending time in movie lots")

2.
Now let’s give these nodes some responsibilities! yacko can keep track of dot and dot can keep up with wacko. wacko can’t keep track of anything though.

Below the newly created nodes, use your .set_link_node() method to give:

yacko a link_node of dot
dot a link_node of wacko

yacko = Node("likes to yak")
wacko = Node("has a penchant for hoarding snacks")
dot = Node("enjoys spending time in movie lots")

dot.set_link_node(wacko)
yacko.set_link_node(dot)


3.
Create two new variables, dots_data, and wackos_data. Use both getter methods to get dot‘s value from yacko and get wacko‘s value from dot. Print dots_data and wackos_data to the console to see the results!

When your code is passing, take a moment to consider:

How would you get yacko‘s value?
How could you get from yacko to wacko‘s value?
How do you think nodes could be helpful for keeping track of and storing information?

dots_data = yacko.get_link_node().get_value()
wackos_data = dot.get_link_node().get_value()

print(dots_data)
print(wackos_data)

-------------------------------------------

Linked Lists:

Linked lists are one of the basic data structures used in computer science. They have many direct applications and serve as the foundation for more complex data structures.


