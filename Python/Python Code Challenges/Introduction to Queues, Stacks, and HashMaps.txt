Introduction: Queues, Stacks, and HashMaps

Create and use your own Queue class and enqueue(), dequeue(), and peek() methods in Python.
Create and use your own Stack class and push(), pop(), and peek() methods in Python.
Create, understand, and use your own HashMap class to create hashing functions and compression functions, handle collisions, and use open addressing in Python.

----------------------------------

Queues: Conceptual

Introduction
A queue is a data structure which contains an ordered set of data.

Queues provide three methods for interaction:

Enqueue - adds data to the “back” or end of the queue
Dequeue - provides and removes data from the “front” or beginning of the queue
Peek - reveals data from the “front” of the queue without removing it
This data structure mimics a physical queue of objects like a line of people buying movie tickets. Each person has a name (the data). The first person to enqueue, or get into line, is both at the front and back of the line. As each new person enqueues, they become the new back of the line.

When the cashier serves someone, they begin at the front of the line (or people would get very mad!). Each person served is dequeued from the front of the line, they purchase a ticket and leave.

If they just want to know who is next in line, they can peek and get their name without removing them from the queue.

The first person in the queue is the first to be served. Queues are a First In, First Out or FIFO structure.

Implementation
Queues can be implemented using a linked list as the underlying data structure. The front of the queue is equivalent to the head node of a linked list and the back of the queue is equivalent to the tail node.

Since operations are only allowed to affect the front or back of the queue, any traversal or modification to other nodes within the linked list is disallowed. Since both ends of the queue must be accessible, a reference to both the head node and the tail node must be maintained.

One last constraint that may be placed on a queue is its length. If a queue has a limit on the amount of data that can be placed into it, it is considered a bounded queue.

Similar to stacks, attempting to enqueue data onto an already full queue will result in a queue overflow. If you attempt to dequeue data from an empty queue, it will result in a queue underflow.

Queues:

Contain data nodes
Support three main operations:
Enqueue adds data to the back of the queue
Dequeue removes and provides data from the front of the queue
Peek provides data on the front of the queue
Can be implemented using a linked list or array
Bounded queues have a limited size.
Enqueueing onto a full queue causes a queue overflow
Queues process data First In, First Out (FIFO)

-------------------------------------------------------------------------

Queues Python Introduction

As previously mentioned, a queue is a data structure that contains an ordered set of data that follows a FIFO (first in, first out) protocol. You can visualize it as a line at a deli:

The customer at the front of the line (equivalent to the head in a queue) is the first customer to get served
Any new customer must go to the back of the line (the tail of the queue) and wait until everyone in front of them has been served (no line cutters allowed in this deli!)
The deli server only needs to know about the current order

Now, we can use Python to build out a Queue class with those three essential queue methods:

enqueue() which will allow us to add a new node to the tail of the queue
dequeue() which will allow us to remove a node from the head of the queue and return its value
peek() which will allow us to view the value of head of the queue without returning it

We’ll also set up a few helper methods that will help us keep track of the queue size in order to prevent queue “overflow” and “underflow.”

1.
Within queue.py in the pane to the right, create a Queue class with an __init__() method. Inside the method:

set an instance property head equal to None
set another instance property tail equal to None

class Queue:
  def __init__(self):
    self.head = None
    self.tail = None

2.
Below __init__(), define another method peek() that returns the value of the stack’s head using the Node method get_value().

  def peek(self):
    return self.head.get_value()

--------------------------------------------------

Queues Python Size

Bounded queues require limits on the number of nodes that can be contained, while other queues don’t. To account for this, we will need to make some modifications to our Queue class so that we can keep track of and limit size where needed.

We’ll be adding two new properties to help us out here:

A size property to keep track of the queue’s current size
A max_size property that bounded queues can utilize to limit the total node count
In addition, we will add three new methods:

get_size() will return the value of the size property
has_space() will return True if the queue has space for another node
is_empty() will return true if the size is 0

1.
Add a new parameter max_size to your __init__() method that has a default value of None. Inside the method:

create a max_size instance variable assigned to max_size
create another instance variable size and set it equal to 0

  def __init__(self, max_size=None):
    self.head = None
    self.tail = None
    self.max_size = max_size
    self.size = 0

2.
Inside Queue define a new method get_size() that returns the size instance property.

  def get_size(self):
    return self.size   

3.
Below get_size(), define a new method called has_space().

Inside of has_space(), check the value of self.max_size.

If self.max_size is None, we will always have space in the queue, so we can return True
Otherwise, if there is a value in max_size, return True if max_size is greater than self.get_size()

  def has_space(self):
    if self.max_size == None:
      return True
    else:
      return self.max_size > self.get_size()

4.
Define another method is_empty for Queue. The method should return True if the queue is empty (if the size of the queue is 0).

  def is_empty(self):
    return self.size == 0

5.
Now we’ll make sure we aren’t attempting to peek() on an empty queue. After all, a deli server can’t get an order from a line with no customers!

At the top of your peek() method body, use is_empty() to see if the queue is empty.

if so, the method should just print “Nothing to see here!”
if not, peek() will perform the same as it did before


  def peek(self):
    if self.is_empty():
      print("Nothing to see here!")
    else:
      return self.head.get_value()

Full Code:

from node import Node

class Queue:
  # Add max_size and size properties within __init__():
  def __init__(self, max_size=None):
    self.head = None
    self.tail = None
    self.max_size = max_size
    self.size = 0
    
  def peek(self):
    if self.is_empty():
      print("Nothing to see here!")
    else:
      return self.head.get_value()
  
  # Define get_size() and has_space() below:
  def get_size(self):
    return self.size

  def has_space(self):
    if self.max_size == None:
      return True
    else:
      return self.max_size > self.get_size()

  def is_empty(self):
    return self.size == 0   

--------------------------------------------------------------------------

Queues Python Enqueue

“Enqueue” is a fancy way of saying “add to a queue,” and that is exactly what we’re doing with the enqueue() method.

There are three scenarios that we are concerned with when adding a node to the queue:

The queue is empty, so the node we’re adding is both the head and tail of the queue
The queue has at least one other node, so the added node becomes the new tail
The queue is full, so the node will not get added because we don’t want queue “overflow”

1.
Inside the Queue class you built, define a method enqueue() that takes a node value value as a parameter.

Add an if clause to check if the queue has space
If it does, instantiate a Node that takes value as its argument and assign it to a new variable item_to_add
Print “Adding “ + str(item_to_add.get_value()) + “ to the queue!”

  def enqueue(self, value):
    if self.has_space():
      item_to_add = Node(value)
      print("Adding " +str(item_to_add.get_value()) + " to the queue!")

2.
Also inside the if statement, do the following:

Check if the queue is empty — if so, set both the instance’s head and tail to the item_to_add
Otherwise, use Node‘s set_next_node() method to:
set item_to_add as the current tail‘s next node
set tail equal to item_to_add
Increment the queue’s size by 1

      if self.is_empty():
        self.head = item_to_add
        self.tail = item_to_add
      else:
        self.tail.set_next_node(item_to_add)
        self.tail = item_to_add
      self.size += 1

3.
After the outermost if statement, create an else statement. Within it, print out “Sorry, no more room!”

    else:
      print("Sorry, no more room!")


Full code:

from node import Node

class Queue:
  def __init__(self, max_size=None):
    self.head = None
    self.tail = None
    self.max_size = max_size
    self.size = 0
    
  # Add your enqueue method below:
  def enqueue(self, value):
    if self.has_space():
      item_to_add = Node(value)
      print("Adding " +str(item_to_add.get_value()) + " to the queue!")
      if self.is_empty():
        self.head = item_to_add
        self.tail = item_to_add
      else:
        self.tail.set_next_node(item_to_add)
        self.tail = item_to_add
      self.size += 1
    else:
      print("Sorry, no more room!")
    
  def peek(self):
    if self.is_empty():
      print("Nothing to see here!")
    else:
      return self.head.get_value()
  
  def get_size(self):
    return self.size
  
  def has_space(self):
    if self.max_size == None:
      return True
    else:
      return self.max_size > self.get_size()
    
  def is_empty(self):
    return self.size == 0

q = Queue()
q.enqueue("all the fluffy kitties")

-----------------------------------------------------------------

Queues Python Dequeue

We can add items to the tail of our queue, but we remove them from the head using a method known as dequeue(), which is another way to say “remove from a queue”. Like enqueue(), we care about the size of the queue — but in the other direction, so that we prevent queue “underflow”. After all, you don’t want to remove something that isn’t there!

As with peek(), our dequeue() method should return the value of the head. Unlike, peek(), dequeue() will also remove the current head and replace it with the following node.

For dequeue, there are three scenarios that we will take into account:

The queue is empty, so we cannot remove or return any nodes lest we run into queue “underflow”
The queue has one node, so when we remove it, the queue will be empty and we need to reset the queue’s head and tail to None
The queue has more than one node, and we just remove the head node and reset the head to the following node

1.
Inside the Queue class you built, define a method dequeue().

Add an if clause to check if the queue is not empty
If so, set a new variable item_to_remove to the current head
Inside your if statement, print: “Removing “ + str(item_to_remove.get_value()) + “ from the queue!”

  def dequeue(self):
    if self.get_size() > 0:
      item_to_remove = self.head
      print("Removing " +str(item_to_remove.get_value()) + " from the queue!")

2.
Inside the if statement, below your print statement, check if the size is 1.

If so, give the queue’s head and tail a value of None
Otherwise, set the queue’s head equal to the following node using Node‘s handy dandy get_next_node() method

      if self.get_size() == 1:
        self.head = None
        self.tail = None
      else:
        self.head = self.head.get_next_node()

3.
Outside of the inner if/else clause

reduce the queue’s size by 1
use Node‘s get_value() method to return the value of item_to_remove

      self.size -= 1
      return item_to_remove.get_value()

4.
After the outermost if statement, create an else statement. Within it, print “This queue is totally empty!”

      print("This queue is totally empty!")

Full Code:

from node import Node

class Queue:
  def __init__(self, max_size=None):
    self.head = None
    self.tail = None
    self.max_size = max_size
    self.size = 0
    
  def enqueue(self, value):
    if self.has_space():
      item_to_add = Node(value)
      print("Adding " + str(item_to_add.get_value()) + " to the queue!")
      if self.is_empty():
        self.head = item_to_add
        self.tail = item_to_add
      else:
        self.tail.set_next_node(item_to_add)
        self.tail = item_to_add
      self.size += 1
    else:
      print("Sorry, no more room!")
      
  # Add your dequeue method below:
  def dequeue(self):
    if self.get_size() > 0:
      item_to_remove = self.head
      print("Removing " +str(item_to_remove.get_value()) + " from the queue!")
      if self.get_size() == 1:
        self.head = None
        self.tail = None
      else:
        self.head = self.head.get_next_node()
      self.size -= 1
      return item_to_remove.get_value()
    else:
      print("This queue is totally empty!")

----------------------------------------------------------------------------

Queues Example:

from node import Node

class Queue:
  def __init__(self, max_size=None):
    self.head = None
    self.tail = None
    self.max_size = max_size
    self.size = 0
    
  def enqueue(self, value):
    if self.has_space():
      item_to_add = Node(value)
      print("Adding " + str(item_to_add.get_value()) + " to the queue!")
      if self.is_empty():
        self.head = item_to_add
        self.tail = item_to_add
      else:
        self.tail.set_next_node(item_to_add)
        self.tail = item_to_add
      self.size += 1
    else:
      print("Sorry, no more room!")
         
  def dequeue(self):
    if self.get_size() > 0:
      item_to_remove = self.head
      print(str(item_to_remove.get_value()) + " is served!")
      if self.get_size() == 1:
        self.head = None
        self.tail = None
      else:
        self.head = self.head.get_next_node()
      self.size -= 1
      return item_to_remove.get_value()
    else:
      print("The queue is totally empty!")
  
  def peek(self):
    if self.size > 0:
      return self.head.get_value()
    else:
      print("No orders waiting!")
  
  def get_size(self):
    return self.size
  
  def has_space(self):
    if self.max_size == None:
      return True
    else:
      return self.max_size > self.get_size()
    
  def is_empty(self):
    return self.size == 0

print("Creating a deli line with up to 10 orders...\n------------")
deli_line = Queue(10)
print("Adding orders to our deli line...\n------------")
deli_line.enqueue("egg and cheese on a roll")
deli_line.enqueue("bacon, egg, and cheese on a roll")
deli_line.enqueue("toasted sesame bagel with butter and jelly")
deli_line.enqueue("toasted roll with butter")
deli_line.enqueue("bacon, egg, and cheese on a plain bagel")
deli_line.enqueue("two fried eggs with home fries and ketchup")
deli_line.enqueue("egg and cheese on a roll with jalapeos")
deli_line.enqueue("plain bagel with plain cream cheese")
deli_line.enqueue("blueberry muffin toasted with butter")
deli_line.enqueue("bacon, egg, and cheese on a roll")

deli_line.enqueue("western omelet with home fries")

print("------------\nOur first order will be " + deli_line.peek())
print("------------\nNow serving...\n------------")
deli_line.dequeue()
deli_line.dequeue()
deli_line.dequeue()
deli_line.dequeue()
deli_line.dequeue()
deli_line.dequeue()
deli_line.dequeue()
deli_line.dequeue()
deli_line.dequeue()
deli_line.dequeue()

deli_line.dequeue()

-------------------
Output:

Creating a deli line with up to 10 orders...
------------
Adding orders to our deli line...
------------
Adding egg and cheese on a roll to the queue!
Adding bacon, egg, and cheese on a roll to the queue!
Adding toasted sesame bagel with butter and jelly to the queue!
Adding toasted roll with butter to the queue!
Adding bacon, egg, and cheese on a plain bagel to the queue!
Adding two fried eggs with home fries and ketchup to the queue!
Adding egg and cheese on a roll with jalapeos to the queue!
Adding plain bagel with plain cream cheese to the queue!
Adding blueberry muffin toasted with butter to the queue!
Adding bacon, egg, and cheese on a roll to the queue!
Sorry, no more room!
------------
Our first order will be egg and cheese on a roll
------------
Now serving...
------------
egg and cheese on a roll is served!
bacon, egg, and cheese on a roll is served!
toasted sesame bagel with butter and jelly is served!
toasted roll with butter is served!
bacon, egg, and cheese on a plain bagel is served!
two fried eggs with home fries and ketchup is served!
egg and cheese on a roll with jalapeos is served!
plain bagel with plain cream cheese is served!
blueberry muffin toasted with butter is served!
bacon, egg, and cheese on a roll is served!
The queue is totally empty!
