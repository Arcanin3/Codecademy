Two-Pointer Linked List Techniques

Two Pointers Moving in Parallel
Consider the following problem:

Create a method that returns the nth last element of a singly linked list.

For example: given a linked list with the following elements 1 -> 2 -> 3 -> 4 -> 5, return the 2nd to last element. The answer would be element 4.

In order to do this, you’ll need some way of knowing how far you are from the end of the list itself. However, in a singly linked list, there’s no easy way to iterate back through the list when you find the end.

If you want, you can try your hand at the problem directly, or we can walk through some approaches below.

Approaches
One thing that might first come to mind is to use a list to store a representation of the linked list, and then to obtain the nth to last element from this list. While this approach results in an easy-to-read implementation, it could also use up lots of memory maintaining a dual representation of the same data. If the linked list has one million nodes, we’ll need one million pointers in a list to keep track of it! An approach like this results in an extra O(n) space being allocated.

The code for this approach would look like the following:

def list_nth_last(linked_list, n):
  linked_list_as_list = []
  current_node = linked_list.head_node
  while current_node:
    linked_list_as_list.append(current_node)
    current_node = current_node.get_next_node()
  return linked_list_as_list[len(linked_list_as_list) - n]

Instead of creating an entire parallel list, we can solve this problem by using two pointers at different positions in the list but moving at the same rate. As in the previous example, we will use one pointer to iterate through the entire list, but we’ll also move a second pointer delayed n steps behind the first one. A count variable can keep track of the position of the current element in the linked list that the tail pointer is pointing to, which is initially set to 1 which is the first element’s position.

The pseudocode for this approach would look like the following:

nth last pointer = None
tail pointer = linked list head
count = 1

while tail pointer exists
  move tail pointer forward
  increment count

  if count >= n + 1
    if nth last pointer is None
      set nth last pointer to head
    else
      move nth last pointer forward

return nth last pointer
When the tail pointer moves n nodes into the linked list from its starting position of 1, it will be at position n + 1. We want the nth last pointer to be n nodes behind, so we set the nth last pointer to the head node at position 1. This is because the position n nodes behind the n + 1th node is (n + 1) - (n) = 1. Then, each following iteration will move both pointers at the same speed, until the tail pointer points to the end of the linked list.

Let’s visualize the steps of the algorithm through the following example, where we want to obtain the 2nd to last node of the linked list. T represents the tail pointer and N represents the nth last pointer. For each iteration of the while loop, we will also keep track of the count value.

Starting State

count = 1
T

1  2  3  4  5

First Tick

count = 2
   T

1  2  3  4  5

Second Tick

count = 3
      T
N
1  2  3  4  5

Third Tick

count = 4
         T
   N
1  2  3  4  5

Fourth Tick

count = 5
            T
      N
1  2  3  4  5

Final Tick

count = 6
               T
         N
1  2  3  4  5  None


Complete the nth_last_node() function so that it returns the correct Node instance (or None if the linked_list is shorter than n elements). Do this without creating any additional new data structures (such as a list). You can assume that the linked list has no cycles.

You can use the generate_test_linked_list() function to test it yourself. It returns a linked list with values from 1 -> 2 -> ... -> 49 -> 50.

from LinkedList import LinkedList

# Complete this function:
def nth_last_node(linked_list, n):
  current = None
  tail_seeker = linked_list.head_node
  count = 1
  while tail_seeker:
    tail_seeker = tail_seeker.get_next_node()
    count += 1
    if count >= n + 1:
      if current is None:
        current = linked_list.head_node
      else:
          current = current.get_next_node()
  return current

def generate_test_linked_list():
  linked_list = LinkedList()
  for i in range(50, 0, -1):
    linked_list.insert_beginning(i)
  return linked_list

# Use this to test your code:
test_list = generate_test_linked_list()
print(test_list.stringify_list())
nth_last = nth_last_node(test_list, 4)
print(nth_last.value)

Output:

<head> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 <tail>
47

In Python, we can implement the nth-last-node-finder function as such:

def nth_last_node(linked_list, n):
  current = None
  tail_seeker = linked_list.head_node
  count = 1
  while tail_seeker:
    tail_seeker = tail_seeker.get_next_node()
    count += 1
    if count >= n + 1:
      if current is None:
        current = linked_list.head_node
      else:
        current = current.get_next_node()
  return current

The exact variable names aren’t important, and the internal implementation could be written in a number of ways, but the important part is that we are able to complete this problem efficiently, in O(n) time (we must iterate through the entire list once), and O(1) space complexity (we always use only three variables no matter what size the linked list is: two pointers and a counter).

---------------------------------------

Pointers at Different Speeds
Using two pointers moving in parallel was a good solution to the previous problem. However, there are other problems where having two pointers moving in parallel wouldn’t be as useful. Let’s take a look at one of those problems and consider a new strategy that uses two pointers moving at different speeds.

Consider the following problem:

Create a method that returns the middle node of a linked list.

For example, given the linked list with the following elements 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7, the middle node would be the element with value 4.

Approaches
As before, it’s possible to find a solution by iterating through the entire list, creating a list representation, and then returning the middle index. But, also as before, this can potentially take up lots of extra space:

create list
while the linked list has not been fully iterated through
  push the current element onto list
  move forward one node
return list[length / 2]
Instead, we can use two pointers to move through the linked list. The first pointer takes two steps through the linked list for every one step that the second takes, so it iterates twice as fast:

fast pointer = linked list head
slow pointer = linked list head
while fast pointer is not None
  move fast pointer forward
  if the end of the linked list has not been reached
    move fast pointer forward
    move slow pointer forward
return slow pointer
When the first pointer reaches the end of the list, the “slower” second pointer will be pointing to the middle element. Let’s visualize the steps of the algorithm:

Starting State

F
S
1  2  3  4  5  6  7

First Tick

      F
   S
1  2  3  4  5  6  7

Second Tick

            F
      S
1  2  3  4  5  6  7

Third Tick

                  F
         S
1  2  3  4  5  6  7

Final Tick

                     F
         S
1  2  3  4  5  6  7  None

As long as we always move the fast pointer first and check to see that it is not None before moving it and the slow pointer again, we’ll exit iteration at the proper time and have a reference to the middle node with the slow pointer.

Implementation

from LinkedList import LinkedList

Complete the find_middle() function and return the middle node of linked_list. You can assume that the linked list has no cycles.

Return the right-weighted middle for even-length linked lists. For example, in a linked list of 4 elements it should return the element at the third position.

Use generate_test_linked_list(length) to generate linked lists with values from 1 -> 2 -> .. -> length to test out your function. For instance, generate_test_linked_list(4) results in 1 -> 2 -> 3 -> 4.

# Complete this function:
def find_middle(linked_list):
  fast = linked_list.head_node
  slow = linked_list.head_node
  while fast:
    fast = fast.get_next_node()
    if fast:
      fast = fast.get_next_node()
      slow = slow.get_next_node()
  return slow

def generate_test_linked_list(length):
  linked_list = LinkedList()
  for i in range(length, 0, -1):
    linked_list.insert_beginning(i)
  return linked_list

# Use this to test your code:
test_list = generate_test_linked_list(7)
print(test_list.stringify_list())
middle_node = find_middle(test_list)
print(middle_node.value)

Output:
<head> 1 2 3 4 5 6 7 <tail>
4

Solution and Alternatives
In Python, we can implement the find-middle function as such:

def find_middle(linked_list):
  fast = linked_list.head_node
  slow = linked_list.head_node
  while fast:
    fast = fast.get_next_node()
    if fast:
      fast = fast.get_next_node()
      slow = slow.get_next_node()
  return slow

As with the nth-to-last solution, this solution has O(n) time complexity, and O(1) space complexity (we always use two variables no matter what size the linked list is: two pointers).

Half-Speed

Another equally valid solution is to move the fast pointer once with each loop iteration but only move the slow pointer every-other iteration:

def find_middle_alt(linked_list):
  count = 0
  fast = linked_list.head_node
  slow = linked_list.head_node
  while fast:
    fast = fast.get_next_node()
    if count % 2 != 0:
      slow = slow.get_next_node()
    count += 1
  return slow

Conclusions
Many linked list problems can be solved with the two-pointer technique. If it seems like a linked list problem requires keeping track of multiple positions or creating other data representations (such as using a list), consider whether two pointers iterating in parallel or at different speeds could help solve the problem efficiently. We didn’t cover full solutions to these here, but variations on the two-pointer technique can be used to:

Detect a cycle in a linked list
Rotate a linked list by k places

---------------------------------------------------

Doubly Linked Lists

Doubly Linked Lists
A conceptual overview of Doubly Linked Lists.

Like a singly linked list, a doubly linked list is comprised of a series of nodes. Each node contains data and two links (or pointers) to the next and previous nodes in the list. The head node is the node at the beginning of the list, and the tail node is the node at the end of the list. The head node’s previous pointer is set to null and the tail node’s next pointer is set to null.

Think of your daily commute on the subway as a real-world example of a doubly linked list. Your home is the head of the list, your place of work is the tail, and every stop in between is another node in the list.

Adding to the list
In a doubly linked list, adding to the list is a little complicated as we have to keep track of and set the node’s previous pointer as well as update the tail of the list if necessary.

Adding to the head
When adding to the head of the doubly linked list, we first need to check if there is a current head to the list. If there isn’t, then the list is empty, and we can simply make our new node both the head and tail of the list and set both pointers to null. If the list is not empty, then we will:

Set the current head’s previous pointer to our new head.
Set the new head’s next pointer to the current head.
Set the new head’s previous pointer to null.
Adding to the tail
Similarly, there are two cases when adding a node to the tail of a doubly linked list. If the list is empty, then we make the new node the head and tail of the list and set the pointers to null. If the list is not empty, then we:

Set the current tail’s next pointer to the new tail
Set the new tail’s previous pointer to the current tail
Set the new tail’s next pointer to null

Removing from the list
Due to the extra pointer and tail property, removing the head from a doubly linked list is slightly more complicated than removing the head from a singly linked list. However, the previous pointer and tail property make it much simpler to remove the tail of the list, as we don’t have to traverse the entire list to be able to do it.

Removing the head
Removing the head involves updating the pointer at the beginning of the list. We will set the previous pointer of the new head (the element directly after the current head) to null, and update the head property of the list. If the head was also the tail, the tail removal process will occur as well.

Removing the tail
Similarly, removing the tail involves updating the pointer at the end of the list. We will set the next pointer of the new tail (the element directly before the tail) to null, and update the tail property of the list. If the tail was also the head, the head removal process will occur as well.

Removing from the middle of the list
It is also possible to remove a node from the middle of the list. Since that node is neither the head nor the tail of the list, there are two pointers that must be updated:

We must set the removed node’s preceding node’s next pointer to its following node.
We must set the removed node’s following node’s previous pointer to its preceding node.
There is no need to change the pointers of the removed node, as updating the pointers of its neighboring nodes will remove it from the list. If no nodes in the list are pointing to it, the node is orphaned.

Review
Let’s take a minute to review what we’ve covered about doubly linked lists in this lesson:

They are comprised of nodes that contain links to the next and previous nodes.
They are bidirectional, meaning it can be traversed in both directions.
They have a pointer to a single head node, which serves as the first node in the list.
They have a pointer to a single tail node, which serves as the last node in the list.
They require the pointers at the head of the list to be updated after addition to or removal of the head.
They require the pointers at the tail of the list to be updated after addition to or removed of the tail.
They require the pointers of the surrounding nodes to be updated after removal from the middle of the list.



